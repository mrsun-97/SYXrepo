{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51],"program":"/home/syx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","adler32","/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=d9f13d2d1ffa2e44","-C","extra-filename=-d9f13d2d1ffa2e44","--out-dir","/home/syx/SYXrepo/vacation_homework/percolation/target/rls/debug/deps","-L","dependency=/home/syx/SYXrepo/vacation_homework/percolation/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/syx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,115,121,120,47,83,89,88,114,101,112,111,47,118,97,99,97,116,105,111,110,95,104,111,109,101,119,111,114,107,47,112,101,114,99,111,108,97,116,105,111,110,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,97,100,108,101,114,51,50,45,100,57,102,49,51,100,50,100,49,102,102,97,50,101,52,52,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"adler32","disambiguator":[16180214561291292544,2057574920613717834]},"crate_root":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src","external_crates":[{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13653490757311001470,18210972786764511751]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10798836723055308036,13313936280221541629]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4173213016744015638,3014784451015659406]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11944383677982007713,15257420578295466644]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[4959566726620691501,6146722101769139636]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[11525715658488109252,1561200000967009509]}},{"file_name":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[14286758744204974931,8495317743760309751]}}],"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9451,"line_start":1,"line_end":301,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":9451,"line_start":1,"line_end":301,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/syx/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/adler32-1.0.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":40}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2931,"byte_end":2945,"line_start":87,"line_end":87,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3064,"byte_end":3067,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"fn () -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty Adler32 context (with hash 1).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3201,"byte_end":3211,"line_start":99,"line_end":99,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"fn (adler32: u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an Adler32 context with the given initial value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3446,"byte_end":3457,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"fn (buffer: &[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Convenience function initializing a context from the hash of a buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3640,"byte_end":3644,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current hash.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3792,"byte_end":3798,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"fn (&mut self, size: usize, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the given `byte` that was fed to the algorithm `size` bytes ago.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4172,"byte_end":4178,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"fn (&mut self, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a new `byte` to the algorithm to update the hash.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4405,"byte_end":4418,"line_start":134,"line_end":134,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"fn (&mut self, buffer: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a vector of bytes to the algorithm to update the hash.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5971,"byte_end":5978,"line_start":188,"line_end":188,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"fn <R> (mut reader: R) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2980,"byte_end":2994,"line_start":92,"line_end":92,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,115,121,120,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,109,105,114,114,111,114,115,46,117,115,116,99,46,101,100,117,46,99,110,45,54,49,101,102,54,101,48,99,100,48,54,102,98,57,98,56,47,97,100,108,101,114,51,50,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2980,"byte_end":2994,"line_start":92,"line_end":92,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}}]}